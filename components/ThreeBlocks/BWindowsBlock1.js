/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'

import { useThree, useFrame } from '@react-three/fiber' 
import {
  CubeTextureLoader,
  CubeCamera,
  WebGLCubeRenderTarget,
  RGBFormat,
  LinearMipmapLinearFilter
} from "three";

export default function BWindowsBlock1(props) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/1/BWindowsBlock1.glb')


  const { scene, gl } = useThree();
    // The cubeRenderTarget is used to generate a texture for the reflective sphere.
    // It must be updated on each frame in order to track camera movement and other changes.
    const cubeRenderTarget = new WebGLCubeRenderTarget(800, {
      format: RGBFormat,
      generateMipmaps: true,
      minFilter: LinearMipmapLinearFilter
    });
    const cubeCamera = new CubeCamera(40, 1000, cubeRenderTarget);
    cubeCamera.position.set(110, 30, -70);
    scene.add(cubeCamera);
  
    // Update the cubeCamera with current renderer and scene.
    useFrame(() => cubeCamera.update(gl, scene));

    const GlassRefMaterial = (
    <meshBasicMaterial
        attach="material"
        envMap={cubeCamera.renderTarget.texture}
        color="white"
        roughness={0.1}
        metalness={.5}
        transparent
        opacity={.7}
      />
      )


  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.Glass.geometry}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.01}
      >
      <meshStandardMaterial attach="material" color={'#161516'} transparent opacity={0.7}/>
      </mesh>
    </group>
  )
}

useGLTF.preload('/1/BWindowsBlock1.glb')

//<meshStandardMaterial attach="material" color={'#161516'} transparent opacity={0.7}/>